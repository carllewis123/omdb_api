// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.1
// source: request.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilmManagementClient is the client API for FilmManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmManagementClient interface {
	SearchByParamGrpc(ctx context.Context, in *RequestParameter, opts ...grpc.CallOption) (*ListFilm, error)
	GetDetailFilmGrpc(ctx context.Context, in *RequestParameter, opts ...grpc.CallOption) (*DetailFilm, error)
}

type filmManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmManagementClient(cc grpc.ClientConnInterface) FilmManagementClient {
	return &filmManagementClient{cc}
}

func (c *filmManagementClient) SearchByParamGrpc(ctx context.Context, in *RequestParameter, opts ...grpc.CallOption) (*ListFilm, error) {
	out := new(ListFilm)
	err := c.cc.Invoke(ctx, "/models.FilmManagement/SearchByParamGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmManagementClient) GetDetailFilmGrpc(ctx context.Context, in *RequestParameter, opts ...grpc.CallOption) (*DetailFilm, error) {
	out := new(DetailFilm)
	err := c.cc.Invoke(ctx, "/models.FilmManagement/GetDetailFilmGrpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmManagementServer is the server API for FilmManagement service.
// All implementations must embed UnimplementedFilmManagementServer
// for forward compatibility
type FilmManagementServer interface {
	SearchByParamGrpc(context.Context, *RequestParameter) (*ListFilm, error)
	GetDetailFilmGrpc(context.Context, *RequestParameter) (*DetailFilm, error)
	mustEmbedUnimplementedFilmManagementServer()
}

// UnimplementedFilmManagementServer must be embedded to have forward compatible implementations.
type UnimplementedFilmManagementServer struct {
}

func (UnimplementedFilmManagementServer) SearchByParamGrpc(context.Context, *RequestParameter) (*ListFilm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByParamGrpc not implemented")
}
func (UnimplementedFilmManagementServer) GetDetailFilmGrpc(context.Context, *RequestParameter) (*DetailFilm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailFilmGrpc not implemented")
}
func (UnimplementedFilmManagementServer) mustEmbedUnimplementedFilmManagementServer() {}

// UnsafeFilmManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmManagementServer will
// result in compilation errors.
type UnsafeFilmManagementServer interface {
	mustEmbedUnimplementedFilmManagementServer()
}

func RegisterFilmManagementServer(s grpc.ServiceRegistrar, srv FilmManagementServer) {
	s.RegisterService(&FilmManagement_ServiceDesc, srv)
}

func _FilmManagement_SearchByParamGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmManagementServer).SearchByParamGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.FilmManagement/SearchByParamGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmManagementServer).SearchByParamGrpc(ctx, req.(*RequestParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmManagement_GetDetailFilmGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmManagementServer).GetDetailFilmGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.FilmManagement/GetDetailFilmGrpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmManagementServer).GetDetailFilmGrpc(ctx, req.(*RequestParameter))
	}
	return interceptor(ctx, in, info, handler)
}

// FilmManagement_ServiceDesc is the grpc.ServiceDesc for FilmManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilmManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.FilmManagement",
	HandlerType: (*FilmManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchByParamGrpc",
			Handler:    _FilmManagement_SearchByParamGrpc_Handler,
		},
		{
			MethodName: "GetDetailFilmGrpc",
			Handler:    _FilmManagement_GetDetailFilmGrpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request.proto",
}
